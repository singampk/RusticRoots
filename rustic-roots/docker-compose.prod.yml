version: '3.8'

services:
  # PostgreSQL Database for Production
  database:
    image: postgres:15
    container_name: rustic-roots-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rustic_roots}
      POSTGRES_USER: ${POSTGRES_USER:-rustic_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - rustic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rustic_admin} -d ${POSTGRES_DB:-rustic_roots}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Do not expose database port in production for security

  # Next.js Application for Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: rustic-roots-app-prod
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-rustic_admin}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-rustic_roots}?sslmode=disable
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rustic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma db seed &&
        node server.js
      "

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: rustic-roots-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - rustic-network

volumes:
  postgres_prod_data:

networks:
  rustic-network:
    driver: bridge