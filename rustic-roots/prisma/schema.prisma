generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  name             String?
  email            String           @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role             @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orders           Order[]
  products         Product[]
  promotions       Promotion[]
  promotionUsages  PromotionUsage[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[]
  category    String
  stock       Int
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  orderItems  OrderItem[]
  owner       User        @relation(fields: [ownerId], references: [id])
  orders      Order[]     @relation("OrderProducts")
}

model Order {
  id                String           @id @default(uuid())
  orderNumber       String           @unique
  total             Float
  subtotal          Float
  discountAmount    Float            @default(0)
  status            OrderStatus      @default(RECEIVED_ORDER)
  shippingAddress   Json?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userId            String
  promotionId       String?
  promotionCode     String?
  promotionSnapshot Json?
  promotion         Promotion?       @relation(fields: [promotionId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  items             OrderItem[]
  promotionUsages   PromotionUsage[]
  products          Product[]        @relation("OrderProducts")
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  productId String
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Promotion {
  id            String             @id @default(uuid())
  name          String
  description   String?
  code          String             @unique
  type          PromotionType
  value         Float
  usageType     PromotionUsageType
  maxUses       Int?
  currentUses   Int                @default(0)
  minOrderValue Float?
  maxDiscount   Float?
  isActive      Boolean            @default(true)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdById   String
  orders        Order[]
  createdBy     User               @relation(fields: [createdById], references: [id])
  usages        PromotionUsage[]
}

model PromotionUsage {
  id          String    @id @default(uuid())
  promotionId String
  userId      String
  orderId     String
  usedAt      DateTime  @default(now())
  order       Order     @relation(fields: [orderId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([promotionId, userId, orderId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  RECEIVED_ORDER
  REVIEWING_ORDER
  WORK_IN_PROGRESS
  IN_SHIPPING
  DELIVERED
}

enum PromotionType {
  FIXED_AMOUNT
  PERCENTAGE
}

enum PromotionUsageType {
  ONE_TIME
  MULTIPLE_USE
}
